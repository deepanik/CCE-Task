const mongoose = require('mongoose');
const express = require('express');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3000;

// MongoDB connection URI (from Kubernetes Service DNS)
const MONGO_URI = process.env.MONGO_URI || 'mongodb+srv://xx:<db_password>@cluster0.o8emf.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0';

mongoose.connect(MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
.then(() => console.log('Connected to MongoDB'))
.catch(err => console.error('Error connecting to MongoDB:', err));

app.get('/', (req, res) => {
  res.send('Hello from Node.js with MongoDB on Kubernetes!');
});

app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});



-----------------------------------------------------------------------------------------------

Deployment mongo

apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
    spec:
      containers:
        - name: mongo
          image: mongo
          ports:
            - containerPort: 27017
          env:
            - name: MONGO_INITDB_DATABASE
              value: mydatabase

----------------------------------------------------------------------------------------------

apiVersion: v1
kind: Service
metadata:
  name: mongo-service
spec:
  selector:
    app: mongo
  ports:
    - protocol: TCP
      port: 27017
      targetPort: 27017
----------------------------------------------------------------------------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: node-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: node-app
  template:
    metadata:
      labels:
        app: node-app
    spec:
      containers:
        - name: node-app
          image: your-node-app-image
          ports:
            - containerPort: 3000
          env:
            - name: MONGO_URI
              value: "mongodb+srv://xx:<db_password>@cluster0.o8emf.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0"
---------------------------------------------------------------------------------------------------
apiVersion: v1
kind: Service
metadata:
  name: node-service
spec:
  selector:
    app: node-app
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
  type: LoadBalancer


docker build -t your-dockerhub-username/node-mongo-app:latest .
docker push your-dockerhub-username/node-mongo-app:latest

kubectl apply -f mongo-deployment.yaml
kubectl apply -f node-deployment.yaml

kubectl get deployments
kubectl get services

kubectl get service node-service